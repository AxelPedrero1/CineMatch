package app.cinematch.agent;

import app.cinematch.api.OllamaClient;
import java.util.List;

/**
 * Repr√©sente un agent conversationnel connect√© √† un mod√®le de langage Ollama,
 * capable de g√©n√©rer des recommandations de films personnalis√©es en fonction
 * des pr√©f√©rences de l‚Äôutilisateur.
 *
 * <p>L‚Äôagent maintient un profil utilisateur et une m√©moire interne (stateless)
 * permettant de conserver la trace des films vus, √† voir ou non appr√©ci√©s.
 * Il formate dynamiquement le prompt syst√®me envoy√© au mod√®le Ollama pour
 * obtenir des r√©ponses coh√©rentes et pertinentes.</p>
 *
 * <p>Exemple d‚Äôutilisation :
 * <pre>{@code
 * OllamaClient ollama = new OllamaClient("http://localhost:11434", "mistral");
 * Profile profil = new Profile("Simon");
 * ChatAgent agent = new ChatAgent(ollama, profil, null);
 * String reponse = agent.ask("Peux-tu me recommander un film fran√ßais r√©cent ?");
 * }</pre>
 *
 * @see app.cinematch.api.OllamaClient
 * @see app.cinematch.agent.Memory
 * @see app.cinematch.agent.Profile
 */
public final class ChatAgent {

    /** Client Ollama utilis√© pour communiquer avec le mod√®le de langage. */
    private final OllamaClient ollama;

    /** Profil utilisateur contenant les pr√©f√©rences g√©n√©rales. */
    private Profile profile;

    /**
     * M√©moire interne stateless.
     * Une nouvelle instance est cr√©√©e localement pour √©viter toute fuite de repr√©sentation
     * (√©vite l‚Äôavertissement SpotBugs EI_EXPOSE_REP2).
     */
    private final Memory memory;
    private final ConversationMemory convMemory; // üß† m√©moire du chat


    /**
     * Construit un nouvel agent conversationnel bas√© sur Ollama, avec un profil et une m√©moire interne.
     *
     * @param ollama  le client Ollama √† utiliser pour les √©changes
     * @param profile le profil utilisateur associ√© √† cet agent
     * @param ignored param√®tre m√©moire ignor√© pour √©viter l‚Äôexposition d‚Äôune instance externe
     */
    public ChatAgent(final OllamaClient ollama, final Profile profile, final Memory ignored) {
        this.ollama = ollama;
        this.profile = profile;
        // Instance interne propre (Memory est stateless, donc pas de perte fonctionnelle)
        this.memory = new Memory();
        this.convMemory = new ConversationMemory(6); // garde les 6 derniers messages
    }

    /**
     * Met √† jour le profil utilisateur associ√© √† l‚Äôagent.
     *
     * @param profile le nouveau profil utilisateur √† appliquer
     */
    public void setProfile(final Profile profile) {
        this.profile = profile;
    }

    /**
     * Envoie un message de l‚Äôutilisateur √† l‚Äôagent et retourne la r√©ponse g√©n√©r√©e par Ollama.
     *
     * <p>La m√©thode r√©cup√®re les listes internes de films vus, souhait√©s et non appr√©ci√©s
     * depuis {@link Memory}, et les ins√®re dans le prompt syst√®me envoy√© au mod√®le.
     * Le mod√®le adapte alors ses recommandations en cons√©quence.</p>
     *
     * @param userPrompt le message de l‚Äôutilisateur (question, demande de recommandation, etc.)
     * @return la r√©ponse g√©n√©r√©e par le mod√®le de langage
     */
    public String ask(final String userPrompt) {
        // 1) Ajout du message utilisateur √† la m√©moire
        convMemory.addUserMessage(userPrompt);

        // 2) Construit le contexte m√©moire des go√ªts
        final List<String> seen = memory.seen();
        final List<String> wishlist = memory.toWatch();
        final List<String> disliked = memory.notInterested();

        final String seenStr = seen.isEmpty() ? "aucun film enregistr√©" : String.join(", ", seen);
        final String wishStr = wishlist.isEmpty() ? "aucun film enregistr√©" : String.join(", ", wishlist);
        final String badStr  = disliked.isEmpty() ? "aucun film enregistr√©" : String.join(", ", disliked);

        // Construit le message syst√®me avec le contexte conversationnel
        final String system = String.format(
                """
                Tu es un expert du cin√©ma francophone, sp√©cialiste des recommandations personnalis√©es.
                Tes r√©ponses doivent toujours √™tre en fran√ßais, avec un ton naturel, amical et professionnel.

                Voici les informations sur les go√ªts de l‚Äôutilisateur :
                - Films d√©j√† vus : %s
                - Films qu‚Äôil souhaite voir : %s
                - Films qu‚Äôil n‚Äôaime pas : %s

                Contexte r√©cent de la conversation :
                %s

                Rappelle-toi :
                - Ne repropose jamais un film d√©j√† vu ou non souhait√©.
                - Inspire-toi du contexte pr√©c√©dent pour rester coh√©rent.
                - R√©ponds de fa√ßon fluide, ‚â§ 100 mots, sans r√©p√©tition.
                """,
                seenStr, wishStr, badStr, convMemory.toPromptString()
        );
        // 4) Appel √† Ollama
        String response = ollama.chat(system, userPrompt);

        // 5) Ajout de la r√©ponse de l‚ÄôIA √† la m√©moire
        convMemory.addAssistantMessage(response);

        return response;    }

    /**
     * Retourne une nouvelle instance de {@link Memory}, garantissant l‚Äôabsence
     * de fuite de repr√©sentation interne.
     *
     * @return une nouvelle instance de {@link Memory}
     */
    public Memory getMemory() {
        return new Memory();
    }

    /**
     * Retourne le profil utilisateur actuellement associ√© √† l‚Äôagent.
     *
     * @return le profil de l‚Äôutilisateur
     */
    public Profile getProfile() {
        return profile;
    }
}
